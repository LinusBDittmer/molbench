from pyscf import scf, gto
from adcc import ReferenceState, LazyMp, set_n_threads
from math import sqrt
import json
import os

mol = gto.M(
	atom="""
[[xyz]]""",
	basis="[[basis]]", symmetry=0,
	charge=[[charge]], spin=[[multiplicity]] - 1,
	verbose=[[verbose]], unit="[[xyz_unit]]"
)

mf = scf.RHF(mol)
mf.conv_tol = [[conv_tol]]
mf.conv_tol_grad = [[conv_tol_grad]]
mf.max_cycle = [[scf_max_cycle]]

mf.kernel()


n_threads = os.environ.get("OMP_NUM_THREADS", None)
if n_threads is None:
	n_threads = 1
set_n_threads(n_threads)

hf = ReferenceState(mf)
mp = LazyMp(hf)

dipole = mp.dipole_moment(2)

name = os.path.basename(__file__)
outname = os.path.splitext(name)[0] + ".out"

metadata = {
	"name": name.split("_")[0],
	"basis": "[[basis]]",
	"method": "[[method]]",
}
data = {
	"energy": mp.energy(2),
	"dipole moment": list(dipole),
	"total dipole moment": sqrt(sum(comp**2 for comp in dipole)),
	"scf energy": mf.energy_tot(),
}
metadata["data"] = data

outdata = {"gs": metadata}
json.dump(outdata, open(outname, 'w'), indent=2)
